Add all of this  to the settings tab  a clean, modern React system settings UI component that lets users:
Toggle Dark/Light mode with smooth animations


Enable/disable Sound Effects


Enable/disable Auto-Optimization


Enable/disable Performance Alerts


View logged-in user info


Logout button


It uses React state hooks and CSS transitions for animations.

Full React Component: SystemSettings.js
jsx
CopyEdit
import React, { useState, useEffect } from "react";

export default function SystemSettings({ user, onLogout, onToggleTheme }) {
  // Local states for toggles (could be lifted up or synced with backend)
  const [darkMode, setDarkMode] = useState(false);
  const [soundEffects, setSoundEffects] = useState(true);
  const [autoOptimization, setAutoOptimization] = useState(false);
  const [performanceAlerts, setPerformanceAlerts] = useState(true);

  // Animate theme toggle and call parent callback
  const toggleDarkMode = () => {
    setDarkMode((prev) => {
      onToggleTheme && onToggleTheme(!prev);
      return !prev;
    });
  };

  // Simple fade animation for toggles
  const fadeStyle = {
    transition: "all 0.3s ease",
  };

  // Example: Save settings to localStorage (replace with your sync logic)
  useEffect(() => {
    localStorage.setItem("settings", JSON.stringify({
      darkMode,
      soundEffects,
      autoOptimization,
      performanceAlerts
    }));
  }, [darkMode, soundEffects, autoOptimization, performanceAlerts]);

  return (
    <div style={styles.container}>
      <h2>System Settings</h2>

      <div style={styles.userInfo}>
        <p>Logged in as: <strong>{user?.username || "Guest"}</strong></p>
        <button onClick={onLogout} style={styles.logoutBtn}>Logout</button>
      </div>

      <div style={styles.setting}>
        <label style={styles.label}>Dark Mode</label>
        <input
          type="checkbox"
          checked={darkMode}
          onChange={toggleDarkMode}
          style={styles.checkbox}
        />
      </div>

      <div style={styles.setting}>
        <label style={styles.label}>Sound Effects</label>
        <input
          type="checkbox"
          checked={soundEffects}
          onChange={() => setSoundEffects((v) => !v)}
          style={styles.checkbox}
        />
      </div>

      <div style={styles.setting}>
        <label style={styles.label}>Auto-Optimization</label>
        <input
          type="checkbox"
          checked={autoOptimization}
          onChange={() => setAutoOptimization((v) => !v)}
          style={styles.checkbox}
        />
      </div>

      <div style={styles.setting}>
        <label style={styles.label}>Performance Alerts</label>
        <input
          type="checkbox"
          checked={performanceAlerts}
          onChange={() => setPerformanceAlerts((v) => !v)}
          style={styles.checkbox}
        />
      </div>
    </div>
  );
}

const styles = {
  container: {
    maxWidth: 400,
    margin: "auto",
    padding: 20,
    borderRadius: 12,
    backgroundColor: "#282c34",
    color: "#fff",
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
    boxShadow: "0 6px 12px rgba(0,0,0,0.3)",
  },
  userInfo: {
    marginBottom: 20,
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
  },
  logoutBtn: {
    backgroundColor: "#ff5555",
    border: "none",
    color: "#fff",
    padding: "8px 12px",
    borderRadius: 8,
    cursor: "pointer",
    fontWeight: "bold",
    transition: "background-color 0.3s ease",
  },
  setting: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 15,
    padding: "10px 0",
    borderBottom: "1px solid #444",
  },
  label: {
    fontSize: 16,
  },
  checkbox: {
    width: 20,
    height: 20,
    cursor: "pointer",
  },
};


How to Use
jsx
CopyEdit
import React, { useState } from "react";
import SystemSettings from "./SystemSettings";

export default function App() {
  const [user, setUser] = useState({ username: "Gamer123" });
  const [theme, setTheme] = useState("dark");

  const handleLogout = () => {
    alert("Logged out!");
    setUser(null);
  };

  const handleToggleTheme = (isDark) => {
    setTheme(isDark ? "dark" : "light");
    document.body.style.backgroundColor = isDark ? "#121212" : "#fff";
    document.body.style.color = isDark ? "#eee" : "#222";
  };

  return (
    <div>
      <SystemSettings
        user={user}
        onLogout={handleLogout}
        onToggleTheme={handleToggleTheme}
      />
    </div>
  );
}


What this includes:
Smooth CSS transitions on toggles and button hover


All main system toggles requested


Logout with user info display


Light/dark theme toggle callback to parent component so you can fully switch themes in your app



add sound effect toggling (play audio on button toggle), or animations with React Spring or Framer Motion for fancier toggles and transitions.

