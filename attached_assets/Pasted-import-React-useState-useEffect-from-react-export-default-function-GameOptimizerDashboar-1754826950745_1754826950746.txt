import React, { useState, useEffect } from "react";

export default function GameOptimizerDashboard() {
  const [messages, setMessages] = useState([
    { sender: "bot", text: "Hi! Ready to optimize your system for Fortnite?" },
  ]);
  const [input, setInput] = useState("");
  const [overlayEnabled, setOverlayEnabled] = useState(false);
  const [metrics, setMetrics] = useState({
    fps: 0,
    ping: 0,
    packetLoss: 0,
    cpu: 0,
    gpu: 0,
    gpuTemp: 0,
  });

  const sendMessage = async () => {
    if (!input.trim()) return;

    const userMessage = { sender: "user", text: input };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");

    // Placeholder AI response
    // Replace with backend call to GPT/Claude
    const fakeResponse =
      "I recommend closing Chrome tabs, setting Fortnite to High Priority, and enabling Game Mode.";
    setMessages((prev) => [...prev, { sender: "bot", text: fakeResponse }]);
  };

  // Mock metrics polling — replace with backend API calls
  useEffect(() => {
    const interval = setInterval(() => {
      setMetrics({
        fps: Math.floor(Math.random() * (240 - 60) + 60),
        ping: Math.floor(Math.random() * (50 - 10) + 10),
        packetLoss: (Math.random() * 2).toFixed(1),
        cpu: Math.floor(Math.random() * 50),
        gpu: Math.floor(Math.random() * 80),
        gpuTemp: Math.floor(Math.random() * (75 - 40) + 40),
      });
    }, 2000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="p-6 max-w-6xl mx-auto grid grid-cols-2 gap-6 bg-gray-100 rounded-lg shadow-lg">
      {/* AI Assistant */}
      <div className="bg-white p-4 rounded-lg shadow space-y-4">
        <h2 className="text-xl font-bold">AI Optimization Assistant</h2>
        <div className="border rounded-lg p-4 h-80 overflow-y-auto bg-gray-50">
          {messages.map((msg, idx) => (
            <div
              key={idx}
              className={`mb-2 ${
                msg.sender === "bot" ? "text-blue-700" : "text-green-700"
              }`}
            >
              <strong>
                {msg.sender === "bot" ? "Assistant" : "You"}:
              </strong>{" "}
              {msg.text}
            </div>
          ))}
        </div>

        <div className="flex space-x-2">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Ask for optimization..."
            className="border p-2 flex-grow rounded"
          />
          <button
            onClick={sendMessage}
            className="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded"
          >
            Send
          </button>
        </div>
      </div>

      {/* Overlay Controls + Metrics */}
      <div className="bg-white p-4 rounded-lg shadow space-y-4">
        <h2 className="text-xl font-bold">Fortnite Overlay & Metrics</h2>

        <div className="flex items-center space-x-3">
          <label className="font-medium">Overlay:</label>
          <button
            onClick={() => setOverlayEnabled(!overlayEnabled)}
            className={`px-4 py-2 rounded ${
              overlayEnabled ? "bg-green-500" : "bg-red-500"
            } text-white`}
          >
            {overlayEnabled ? "Enabled" : "Disabled"}
          </button>
        </div>

        {/* Metrics */}
        <div className="grid grid-cols-3 gap-3 text-sm">
          <div className="bg-gray-50 p-2 rounded shadow">
            <strong>FPS:</strong> {metrics.fps}
          </div>
          <div className="bg-gray-50 p-2 rounded shadow">
            <strong>Ping:</strong> {metrics.ping} ms
          </div>
          <div className="bg-gray-50 p-2 rounded shadow">
            <strong>Packet Loss:</strong> {metrics.packetLoss}%
          </div>
          <div className="bg-gray-50 p-2 rounded shadow">
            <strong>CPU:</strong> {metrics.cpu}%
          </div>
          <div className="bg-gray-50 p-2 rounded shadow">
            <strong>GPU:</strong> {metrics.gpu}%
          </div>
          <div className="bg-gray-50 p-2 rounded shadow">
            <strong>GPU Temp:</strong> {metrics.gpuTemp}°C
          </div>
        </div>

        <div className="space-y-2">
          <label className="block font-medium">Overlay Transparency</label>
          <input type="range" min="0" max="100" className="w-full" />
        </div>

        <div className="space-y-2">
          <label className="block font-medium">Overlay Position</label>
          <select className="border p-2 rounded w-full">
            <option>Top Left</option>
            <option>Top Right</option>
            <option>Bottom Left</option>
            <option>Bottom Right</option>
          </select>
        </div>
      </div>
    </div>
  );
}
